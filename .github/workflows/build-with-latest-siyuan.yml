name: Build Android with Latest SiYuan Assets

on:
  push:
    branches: [ main ]  # Temporary trigger for debugging
  schedule:
    - cron: '0 2 * * *'  # ÊØèÂ§©ÂáåÊô®2ÁÇπÊ£ÄÊü•SiYuanÊõ¥Êñ∞
  workflow_dispatch:
    inputs:
      siyuan_ref:
        description: 'SiYuan branch/tag to build from'
        required: false
        default: 'main'
      force_build:
        description: 'Force build even if no changes'
        required: false
        type: boolean
        default: false

jobs:
  check-siyuan-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_changes.outputs.should_build }}
      siyuan_version: ${{ steps.siyuan_info.outputs.version }}
      siyuan_commit: ${{ steps.siyuan_info.outputs.commit }}
    steps:
      - name: Checkout Android project
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          
      - name: Get latest SiYuan release
        id: get_release
        run: |
          echo "üîç Getting latest SiYuan release..."
          
          # È¶ñÂÖàÂ∞ùËØïËé∑Âèñ‰Ω†ÁöÑ fork ‰∏≠ÁöÑÊúÄÊñ∞ release
          LATEST_TAG=$(curl -s https://api.github.com/repos/citrusjunoss/siyuan/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          # Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ releaseÔºåÂõûÈÄÄÂà∞‰∏ªÂàÜÊîØ
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            echo "‚ö†Ô∏è No releases found in citrusjunoss/siyuan, using main branch"
            echo "tag=main" >> $GITHUB_OUTPUT
            echo "üì¶ Using branch: main"
          else
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "üì¶ Latest tag: $LATEST_TAG"
          fi
          
      - name: Checkout SiYuan project
        uses: actions/checkout@v3
        with:
          repository: citrusjunoss/siyuan
          ref: ${{ steps.get_release.outputs.tag }}
          path: siyuan
          
      - name: Debug repository access
        run: |
          echo "üîç Checking repository access..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          if [ -d "siyuan" ]; then
            echo "‚úÖ SiYuan directory exists"
            echo "SiYuan directory contents:"
            ls -la siyuan/
          else
            echo "‚ùå SiYuan directory not found"
            exit 1
          fi
          
      - name: Get SiYuan info
        id: siyuan_info
        run: |
          cd siyuan
          echo "üîç Getting Git information..."
          git status
          
          TAG_OR_BRANCH="${{ steps.get_release.outputs.tag }}"
          COMMIT=$(git rev-parse HEAD)
          
          if [ "$TAG_OR_BRANCH" = "main" ]; then
            # Â¶ÇÊûúÊòØ‰∏ªÂàÜÊîØÔºåÂ∞ùËØïËé∑ÂèñÊúÄËøëÁöÑ tag Êàñ‰ΩøÁî® commit
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "main-$(git rev-parse --short HEAD)")
          else
            # Â¶ÇÊûúÊòØ tagÔºåÁõ¥Êé•‰ΩøÁî®
            VERSION="$TAG_OR_BRANCH"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "üì¶ SiYuan Version: $VERSION"
          echo "üîç SiYuan Commit: $COMMIT"
          
      - name: Check for changes
        id: check_changes
        run: |
          # Ê£ÄÊü•ÊòØÂê¶ÊúâÂº∫Âà∂ÊûÑÂª∫Ê†áÂøó
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            echo "üîÑ Force build requested"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Ê£ÄÊü•‰∏äÊ¨°ÊûÑÂª∫ÁöÑ SiYuan ÁâàÊú¨
          LAST_VERSION_FILE=".github/last-siyuan-version"
          CURRENT_VERSION="${{ steps.siyuan_info.outputs.version }}"
          
          if [ -f "$LAST_VERSION_FILE" ]; then
            LAST_VERSION=$(cat "$LAST_VERSION_FILE")
            echo "üìã Last built version: $LAST_VERSION"
            echo "üÜï Current version: $CURRENT_VERSION"
            
            if [ "$LAST_VERSION" != "$CURRENT_VERSION" ]; then
              echo "‚úÖ SiYuan has new release, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "‚è≠Ô∏è Same version as last build, skipping"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "üÜï First build, will proceed"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-android:
    needs: check-siyuan-updates
    if: needs.check-siyuan-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Android project
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get latest SiYuan release
        id: get_release
        run: |
          echo "üîç Getting latest SiYuan release..."
          
          # È¶ñÂÖàÂ∞ùËØïËé∑Âèñ‰Ω†ÁöÑ fork ‰∏≠ÁöÑÊúÄÊñ∞ release
          LATEST_TAG=$(curl -s https://api.github.com/repos/citrusjunoss/siyuan/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          # Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ releaseÔºåÂõûÈÄÄÂà∞‰∏ªÂàÜÊîØ
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            echo "‚ö†Ô∏è No releases found in citrusjunoss/siyuan, using main branch"
            echo "tag=main" >> $GITHUB_OUTPUT
            echo "üì¶ Using branch: main"
          else
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "üì¶ Latest tag: $LATEST_TAG"
          fi
          
      - name: Checkout SiYuan project
        uses: actions/checkout@v3
        with:
          repository: citrusjunoss/siyuan
          ref: ${{ steps.get_release.outputs.tag }}
          path: siyuan
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '10.13.1'
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          
      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          
      - name: Build SiYuan kernel for Android
        run: |
          mkdir -p app/libs
          cd siyuan/kernel
          echo "üî® Building SiYuan kernel for Android..."
          gomobile bind --tags fts5 -ldflags "-s -w" -v -o ../../app/libs/kernel.aar -target=android/arm64 -androidapi 26 ./mobile/
          
      - name: Verify kernel build
        run: |
          if [ -f app/libs/kernel.aar ]; then
            echo "‚úÖ kernel.aar built successfully"
            echo "üìä Size: $(du -h app/libs/kernel.aar | cut -f1)"
          else
            echo "‚ùå Failed to build kernel.aar"
            exit 1
          fi
          
      - name: Build SiYuan assets
        run: |
          cd siyuan/app
          echo "üì¶ Installing dependencies..."
          pnpm install
          echo "üî® Building assets..."
          pnpm run build
          
      - name: Create app.zip
        run: |
          cd siyuan
          echo "üìã Creating app.zip..."
          zip -r ../app.zip \
            app/appearance \
            app/changelogs \
            app/guide \
            app/stage
          
          # È™åËØÅÂàõÂª∫ÁöÑÊñá‰ª∂
          cd ..
          if [ -f app.zip ]; then
            echo "‚úÖ app.zip created successfully"
            echo "üìä Size: $(du -h app.zip | cut -f1)"
            echo "üìã Contents preview:"
            unzip -l app.zip | head -15
          else
            echo "‚ùå Failed to create app.zip"
            exit 1
          fi
          
      - name: Prepare Android assets
        run: |
          mkdir -p app/src/main/assets
          mv app.zip app/src/main/assets/
          echo "üìÅ app.zip moved to assets directory"
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Create signing configuration for CI
        run: |
          cat > signings.gradle << 'EOF'
          android {
            signingConfigs {
              siyuanConfig {
                // Empty signing config for CI builds
                // Debug builds don't require signing
              }
            }
          }
          EOF
        
      - name: Build Android APK
        run: |
          chmod +x gradlew
          echo "üî® Building Android Debug APKs for all product flavors..."
          ./gradlew assembleDebug --stacktrace --info
          
      - name: List build outputs for debugging
        run: |
          echo "üîç Checking build outputs..."
          echo "=== Searching for all APK files ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
          
          echo "=== Checking app/build structure ==="
          if [ -d "app/build" ]; then
            echo "üìÅ app/build directory exists"
            echo "üìÅ app/build/outputs structure:"
            ls -la app/build/outputs/ 2>/dev/null || echo "No outputs directory"
            
            echo "üìÅ Checking for apk directory:"
            if [ -d "app/build/outputs/apk" ]; then
              echo "‚úÖ APK directory exists, checking product flavors:"
              ls -la app/build/outputs/apk/
              
              echo "üì± Searching for APK files in product flavor directories:"
              find app/build/outputs/apk -name "*.apk" -type f 2>/dev/null || echo "No APK files in flavor directories"
            else
              echo "‚ùå No APK directory found"
            fi
          else
            echo "‚ùå app/build directory does not exist"
          fi
          
          echo "=== Full directory structure for debugging ==="
          if [ -d "app/build/outputs" ]; then
            find app/build/outputs -type f -name "*.apk" -exec ls -la {} \; 2>/dev/null || echo "No APK files found in outputs"
          fi
          
      - name: Verify and locate APK
        run: |
          echo "üîç Locating all built APK files..."
          
          # Êü•ÊâæÊâÄÊúâÂèØËÉΩÁöÑAPK‰ΩçÁΩÆ
          APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
          
          if [ -n "$APK_FILES" ]; then
            echo "‚úÖ Found APK files:"
            echo "$APK_FILES" | while read apk; do
              echo "  üì± $apk ($(du -h "$apk" | cut -f1))"
            done
            
            echo ""
            echo "üìä APK Count by Product Flavor:"
            find app/build/outputs/apk -name "*.apk" -type f 2>/dev/null | while read apk; do
              flavor=$(echo "$apk" | cut -d'/' -f5)  # Extract flavor from path
              echo "  - $flavor: $(basename "$apk")"
            done
          else
            echo "‚ùå No APK files found anywhere"
            echo "üîç Let's check what was actually built:"
            find app/build -type f 2>/dev/null | head -20
            echo "üîç Maybe the build failed? Let's check gradle build status:"
            echo "Last gradle command should have shown BUILD SUCCESSFUL or BUILD FAILED"
            exit 1
          fi
          
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: siyuan-android-${{ needs.check-siyuan-updates.outputs.siyuan_version }}
          path: |
            app/build/outputs/apk/**/*.apk
          retention-days: 30
          
      - name: Update last version record
        run: |
          mkdir -p .github
          echo "${{ needs.check-siyuan-updates.outputs.siyuan_version }}" > .github/last-siyuan-version
          
      - name: Commit last build info (if changed)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain .github/last-siyuan-version)" ]; then
            git add .github/last-siyuan-version
            git commit -m "chore: update last SiYuan version to ${{ needs.check-siyuan-updates.outputs.siyuan_version }}"
            git push
          else
            echo "No changes to commit"
          fi
          
      - name: Build Summary
        run: |
          echo "## üéâ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **SiYuan Version**: ${{ needs.check-siyuan-updates.outputs.siyuan_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SiYuan Commit**: \`${{ needs.check-siyuan-updates.outputs.siyuan_commit }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "- **APK Size**: $(du -h "$APK_FILE" | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **APK Size**: Not found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- APK available in Actions artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Retention: 30 days" >> $GITHUB_STEP_SUMMARY